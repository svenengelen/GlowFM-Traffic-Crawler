                                if mentioned_road:
                                    print(f"🎯 Found {mentioned_road} clickable element: {element_text_clean[:100]}...")
                                    
                                    # Check for delay patterns DIRECTLY in the clickable element text (A58 pattern)
                                    delay_match = re.search(r'\+\s*(\d+)\s*min', element_text)
                                    if delay_match:
                                        delay_minutes = int(delay_match.group(1))
                                        print(f"🚨 FOUND {mentioned_road} DELAY: {delay_minutes} minutes")
                                        
                                        # Extract length too
                                        length_match = re.search(r'(\d+)\s*km', element_text)
                                        length_km = float(length_match.group(1)) if length_match else 0.0
                                        
                                        print(f"📋 {mentioned_road} Traffic Details: Delay={delay_minutes}min, Length={length_km}km")
                                        
                                        traffic_jam = {
                                            'id': f"{mentioned_road}_filelijst_{int(time.time())}_{len(all_traffic_jams)}",
                                            'road': mentioned_road,
                                            'direction': self._extract_traffic_direction(element_text),
                                            'source_location': "Filelijst comprehensive extraction",
                                            'destination_location': "Filelijst comprehensive extraction",
                                            'route_details': element_text_clean,
                                            'cause': self._extract_traffic_cause(element_text),
                                            'delay_minutes': delay_minutes,
                                            'length_km': length_km,
                                            'raw_text': element_text_clean,
                                            'enhanced_direction': self._extract_traffic_direction(element_text),
                                            'enhanced_cause': self._extract_traffic_cause(element_text),
                                            'last_updated': datetime.now()
                                        }
                                        all_traffic_jams.append(traffic_jam)
                                        print(f"✅ DETECTED {mentioned_road} TRAFFIC JAM: {delay_minutes}min, {length_km}km!")
                                        
                                    else:
                                        # If no direct delay pattern, check for other traffic indicators
                                        traffic_indicators = ['vertraging', 'file', 'oponthoud', 'langzaam', 'stilstaand']
                                        if any(indicator in element_text.lower() for indicator in traffic_indicators):
                                            print(f"📝 {mentioned_road} traffic indicator (no delay pattern): {element_text_clean[:100]}...")
                                            
                                            # Try to extract delay with enhanced patterns
                                            delay_minutes = self._extract_delay_minutes(element_text)
                                            if delay_minutes > 0:
                                                length_km = self._extract_length_km(element_text)
                                                
                                                traffic_jam = {
                                                    'id': f"{mentioned_road}_indicator_{int(time.time())}_{len(all_traffic_jams)}",
                                                    'road': mentioned_road,
                                                    'direction': self._extract_traffic_direction(element_text),
                                                    'source_location': "Filelijst indicator extraction",
                                                    'destination_location': "Filelijst indicator extraction",
                                                    'route_details': element_text_clean,
                                                    'cause': self._extract_traffic_cause(element_text),
                                                    'delay_minutes': delay_minutes,
                                                    'length_km': length_km,
                                                    'raw_text': element_text_clean,
                                                    'enhanced_direction': self._extract_traffic_direction(element_text),
                                                    'enhanced_cause': self._extract_traffic_cause(element_text),
                                                    'last_updated': datetime.now()
                                                }
                                                all_traffic_jams.append(traffic_jam)
                                                print(f"✅ DETECTED {mentioned_road} TRAFFIC (indicator): {delay_minutes}min!")
